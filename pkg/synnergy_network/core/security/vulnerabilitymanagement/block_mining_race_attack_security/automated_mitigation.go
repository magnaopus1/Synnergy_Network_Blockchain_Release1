package block_mining_race_attack_security

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"log"
	"sync"
	"time"

	"golang.org/x/crypto/argon2"
)

// RaceAttackAutomatedMitigation implements security mechanisms for mitigating block mining race attacks.
type RaceAttackAutomatedMitigation struct {
	sync.Mutex
	BlockHashes      map[string]time.Time
	RecentBlocks     []string
	DetectionWindow  time.Duration
	AlertSubscribers []func(string)
}

// NewRaceAttackAutomatedMitigation initializes a new RaceAttackAutomatedMitigation instance.
func NewRaceAttackAutomatedMitigation(detectionWindow time.Duration) *RaceAttackAutomatedMitigation {
	return &RaceAttackAutomatedMitigation{
		BlockHashes:     make(map[string]time.Time),
		DetectionWindow: detectionWindow,
	}
}

// HashBlock generates a secure hash for a given block using Argon2id.
func HashBlock(blockData string) string {
	salt := []byte("some fixed salt") // In a real implementation, use a unique salt for each hash.
	hash := argon2.IDKey([]byte(blockData), salt, 1, 64*1024, 4, 32)
	return hex.EncodeToString(hash)
}

// DetectRaceCondition detects race conditions based on recent block hashes.
func (ram *RaceAttackAutomatedMitigation) DetectRaceCondition(newBlockHash string) {
	ram.Lock()
	defer ram.Unlock()

	now := time.Now()
	ram.BlockHashes[newBlockHash] = now
	ram.RecentBlocks = append(ram.RecentBlocks, newBlockHash)

	// Clean up old block hashes outside the detection window
	for hash, timestamp := range ram.BlockHashes {
		if now.Sub(timestamp) > ram.DetectionWindow {
			delete(ram.BlockHashes, hash)
		}
	}

	if len(ram.BlockHashes) != len(ram.RecentBlocks) {
		ram.triggerAlert("Possible block mining race attack detected.")
		ram.RecentBlocks = nil
	}
}

// SubscribeAlert allows external systems to subscribe to race condition alerts.
func (ram *RaceAttackAutomatedMitigation) SubscribeAlert(subscriber func(string)) {
	ram.AlertSubscribers = append(ram.AlertSubscribers, subscriber)
}

// triggerAlert notifies all subscribers about a detected race condition.
func (ram *RaceAttackAutomatedMitigation) triggerAlert(message string) {
	for _, subscriber := range ram.AlertSubscribers {
		subscriber(message)
	}
	log.Println(message)
}

// Example usage function demonstrating how to use RaceAttackAutomatedMitigation.
func ExampleUsage() {
	ram := NewRaceAttackAutomatedMitigation(5 * time.Minute)

	ram.SubscribeAlert(func(msg string) {
		fmt.Println("ALERT:", msg)
	})

	blockData := "example block data"
	hashedBlock := HashBlock(blockData)
	ram.DetectRaceCondition(hashedBlock)
}

func main() {
	ExampleUsage()
}
