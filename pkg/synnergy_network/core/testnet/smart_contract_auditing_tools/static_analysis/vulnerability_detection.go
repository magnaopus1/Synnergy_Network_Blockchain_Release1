package static_analysis

import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strings"
	"sync"

	"golang.org/x/crypto/argon2"
)

// Vulnerability represents a detected vulnerability in the smart contract code.
type Vulnerability struct {
	ID          int
	Description string
	Severity    string
	Line        int
	CodeSnippet string
}

// VulnerabilityDetector contains methods for detecting vulnerabilities in smart contract code.
type VulnerabilityDetector struct {
	mutex      sync.Mutex
	nextID     int
	vulnerabilities []Vulnerability
}

// NewVulnerabilityDetector creates a new instance of VulnerabilityDetector.
func NewVulnerabilityDetector() *VulnerabilityDetector {
	return &VulnerabilityDetector{
		nextID: 1,
	}
}

// Detect detects vulnerabilities in the provided smart contract code.
func (vd *VulnerabilityDetector) Detect(code string) error {
	vd.mutex.Lock()
	defer vd.mutex.Unlock()

	// Basic example patterns for vulnerability detection
	patterns := map[string]string{
		"Unrestricted Write": `storage\[.*\] = .*;`, // Example regex pattern
		"Reentrancy":         `call\((.*)\).value\((.*)\)\(.*\);`,
	}

	lines := strings.Split(code, "\n")
	for i, line := range lines {
		for desc, pattern := range patterns {
			matched, err := regexp.MatchString(pattern, line)
			if err != nil {
				return fmt.Errorf("error matching pattern: %v", err)
			}
			if matched {
				vd.addVulnerability(desc, "High", i+1, line)
			}
		}
	}

	return nil
}

// addVulnerability adds a detected vulnerability to the list.
func (vd *VulnerabilityDetector) addVulnerability(description, severity string, line int, snippet string) {
	vd.vulnerabilities = append(vd.vulnerabilities, Vulnerability{
		ID:          vd.nextID,
		Description: description,
		Severity:    severity,
		Line:        line,
		CodeSnippet: snippet,
	})
	vd.nextID++
}

// ListVulnerabilities lists all detected vulnerabilities.
func (vd *VulnerabilityDetector) ListVulnerabilities() []Vulnerability {
	vd.mutex.Lock()
	defer vd.mutex.Unlock()
	return vd.vulnerabilities
}

// ClearVulnerabilities clears the list of detected vulnerabilities.
func (vd *VulnerabilityDetector) ClearVulnerabilities() {
	vd.mutex.Lock()
	defer vd.mutex.Unlock()
	vd.vulnerabilities = []Vulnerability{}
	vd.nextID = 1
}


