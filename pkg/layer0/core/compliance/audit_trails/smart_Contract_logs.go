package audit_trails

import (
    "crypto/sha256"
    "encoding/hex"
    "sync"
    "time"

    "github.com/sirupsen/logrus"
)

// SmartContractLog represents the structure of a log entry generated by a smart contract.
type SmartContractLog struct {
    Timestamp       time.Time
    ContractAddress string
    Data            map[string]interface{}
    Hash            string
}

// LogStorage is responsible for storing and managing logs securely.
type LogStorage struct {
    logs []*SmartContractLog
    lock sync.RWMutex
}

// NewLogStorage initializes a new log storage system.
func NewLogStorage() *LogStorage {
    return &LogStorage{
        logs: make([]*SmartContractLog, 0),
    }
}

// AddLog creates a new log from a smart contract's activity and saves it to the storage.
func (ls *LogStorage) AddLog(contractAddress string, data map[string]interface{}) {
    ls.lock.Lock()
    defer ls.lock.Unlock()

    logEntry := &SmartContractLog{
        Timestamp:       time.Now(),
        ContractAddress: contractAddress,
        Data:            data,
        Hash:            generateLogHash(contractAddress, data),
    }
    ls.logs = append(ls.logs, logEntry)
    ls.saveLog(logEntry)
}

// generateLogHash generates a SHA-256 hash for the log entry to ensure its integrity.
func generateLogHash(contractAddress string, data map[string]interface{}) string {
    dataBytes, _ := json.Marshal(data)
    input := string(dataBytes) + contractAddress + time.Now().String()
    hash := sha256.Sum256([]byte(input))
    return hex.EncodeToString(hash[:])
}

// saveLog writes the log entry to a persistent storage or blockchain.
func (ls *LogStorage) saveLog(log *SmartContractLog) {
    // This function would likely interface with a database or append to a blockchain ledger.
    logrus.WithFields(logrus.Fields{
        "timestamp":       log.Timestamp,
        "contractAddress": log.ContractAddress,
        "data":            log.Data,
        "hash":            log.Hash,
    }).Info("Smart Contract Log saved")
}

// VerifyLog verifies the integrity of a log entry using its hash.
func (ls *LogStorage) VerifyLog(log *SmartContractLog) bool {
    expectedHash := generateLogHash(log.ContractAddress, log.Data)
    return log.Hash == expectedHash
}

